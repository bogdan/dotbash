#!/usr/bin/env ruby


require 'rubygems'
require "active_support/inflector"
require "optparse"


class Rsub

  def self.run(args)
    self.new(args).run
  end


  def initialize(args)

    options_parser.parse!(args)

    options[:replace] = true unless options.has_key?(:replace)
    options[:rename] = true unless options.has_key?(:rename)

    if args.size < 3
      usage
      exit 1
    end

    @old_name = args.shift
    @new_name = args.shift
    @path = args.join(" ")

  end

  def run
    pairs.each do |from, to|
      replace(from, to) if options[:replace]
      rename_files(from, to) if options[:rename]
    end
  end

  protected
  def pairs
    @pairs ||= (
      number_methods.product(case_methods).map do |amount, wordcase|
        [@old_name.send(wordcase).send(amount), @new_name.send(wordcase).send(amount)]
      end.to_h
    )
  end

  def rename_files(from, to)
    files = exec("find #{@path} -name '#{from}*' ").split("\n")
    files.each do |old_name|
      new_name = old_name.gsub(from, to)
      exec "mv -v #{old_name} #{new_name}"
    end
  end

  def number_methods
    options[:plural] ? [:pluralize, :singularize] : [:itself]
  end

  def case_methods
    options[:case] ? [:camelcase, :underscore] : [:itself]

  end

  def replace(from, to)
    exec "find #{@path} -type f -exec #{sed_command} 's/#{wrap_word(from)}/#{to}/g' {} \\;"
  end

  def wrap_word(text)
    [sed_word_regexp, text, sed_word_regexp].join
  end

  def sed_command
    [
      "sed",
      "-i",
      macos? ? "''" : "",
    ].join(" ")
  end

  def macos?
    RUBY_PLATFORM.include?("darwin")
  end

  def exec(command)
    puts command
    `#{command}`
  end

  def usage
    puts <<-EOI
Usage: rsub [options] <oldname> <newname> <path> [<path> ...]

    EOI
    options_parser.display
  end

  def options
    @options ||= {}
  end

  def sed_word_regexp
    return '' unless options[:word_regexp]
    macos? ? '[[:<:]]' : '\b'
  end

  def options_parser
    @option_parser ||= OptionParser.new do |opts|
      opts.banner = "Rename files and pattern in file"
      opts.on("-a", "--all", "Same as -cusp: searches pattern for any case and number form") do
        options[:case] = true
        options[:plural] = true
      end
      opts.on("-c", "--case", "Replace pattern in CamelCase and under_score_case") do
        options[:case] = true
      end
      opts.on("-p", "--pluralize", "Replace pattern in plural form as well") do
        options[:plural] = true
      end
      opts.on("-f", "--files", "Only rename files") do
        options[:rename] = true
        options[:replace] = false unless options.has_key?(:replace)
      end
      opts.on("-r", "--replace", "Only replace file content") do
        options[:replace] = true
        options[:rename] = false unless options.has_key?(:rename)
      end
      opts.on("-w", "--word-regexp", "Only replace whole word") do
        if options[:replace] == false
          raise "-w --word-regexp can only be used when replacing is enabled"
        end
        options[:word_regexp] = true
      end
    end
  end

end


Rsub.run(ARGV)

